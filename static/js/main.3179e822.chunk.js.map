{"version":3,"sources":["Components/Pages/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","todoValue","setTodoValue","todosList","JSON","parse","localStorage","getItem","list","setList","useEffect","setItem","stringify","className","type","id","value","onChange","e","target","onClick","map","todoItem","key","newList","filter","Todoitem","idx","handleDelTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAqCeA,MAnCf,WACI,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACIC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,8BAChD,EAAwBP,mBAASG,GAAoB,IAArD,mBAAOK,EAAP,KAAaC,EAAb,KAkBA,OAJAC,qBAAU,WACNJ,aAAaK,QAAQ,4BAA6BP,KAAKQ,UAAUJ,MAClE,CAACA,IAGA,sBAAKK,UAAU,WAAf,UACI,2CACA,uBAAOC,KAAK,OAAOC,GAAG,aAAaC,MAAOf,EAAWgB,SAAU,SAACC,GAAD,OAAOhB,EAAagB,EAAEC,OAAOH,UAC5F,wBAAQD,GAAG,WAAWK,QApBR,WAClBX,EAAQ,GAAD,mBAAKD,GAAL,CAAWP,KAClBC,EAAa,KAkBT,iBACA,6BACCM,EAAMA,EAAKa,KAAI,SAACC,EAAUC,GAAS,OAChC,+BAAgBD,EAAhB,IAA0B,wBAAQF,QAAS,kBAlBjC,SAACG,GACnB,IAAMC,EAAUhB,EAAKiB,QAAO,SAACC,EAAUC,GACnC,OAAOA,IAAQJ,KAEnBd,EAAQe,GAciDI,CAAcL,IAArC,iBAAjBA,MACP,W,MClBHM,MATf,WACE,OACE,sBAAKhB,UAAU,WAAf,UACE,oBAAIA,UAAU,WAAd,kCACA,cAAC,EAAD,QCISiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3179e822.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction Todo() {\r\n    const [todoValue, setTodoValue] = useState('')\r\n    let todosList = JSON.parse(localStorage.getItem('Todo_simple-todo-list-app'))\r\n    const [list, setList] = useState(todosList?todosList:[])\r\n\r\n    const handleAddTodo = () =>  {\r\n        setList([...list, todoValue])\r\n        setTodoValue('')\r\n    }\r\n\r\n    const handleDelTodo = (key) => {\r\n        const newList = list.filter((Todoitem, idx) => {\r\n            return idx !== key\r\n        })\r\n        setList(newList)\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('Todo_simple-todo-list-app', JSON.stringify(list))\r\n    }, [list])\r\n\r\n    return(\r\n        <div className=\"todo-div\">\r\n            <h1>TODO LIST</h1>\r\n            <input type=\"text\" id=\"input-todo\" value={todoValue} onChange={(e) => setTodoValue(e.target.value)} />\r\n            <button id=\"add-todo\" onClick={handleAddTodo}>Add</button>\r\n            <ul>\r\n            {list ?list.map((todoItem, key) => {return(\r\n                <li key={key} >{todoItem} <button onClick={() => handleDelTodo(key)}>X</button></li> \r\n            )}) : null}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo","import React from 'react'\nimport Todo from './Components/Pages/Todo'\nimport './Components/CSS/styles.css'\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <h1 className=\"app-name\">SIMPLE TODO LIST APP</h1>\n      <Todo />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}